/**
 * Ilyde Apis
 * OpenApi interface which exposes Ilyde resources to frontends
 *
 * OpenAPI spec version: 0.2.0
 * Contact: alessiofiorentino@hopenly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { Body10 } from '../models';
import { Body11 } from '../models';
import { Body12 } from '../models';
import { Body9 } from '../models';
import { PageLimitList } from '../models';
import { PageTokenList } from '../models';
import { Project } from '../models';
import { ProjectRevision } from '../models';
import { Status } from '../models';
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export declare const ProjectsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add member to project
     * @param {Body11} body User Id
     * @param {string} id The ID of the project object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProjectMember: (body: Body11, id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Close a project
     * @param {string} id The ID of the project object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    closeProject: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a project
     * @param {Project} body Project object to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject: (body: Project, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Create project's revision
     * @param {Array&lt;string&gt;} files
     * @param {string} id The ID of the project resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProjectRevision: (files: Array<string>, id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a project
     * @param {string} id The ID of the project object to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List project's datasets
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectDatasets: (id: string, limit?: number, page?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Search for project's experiments
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectExperiments: (id: string, limit?: number, page?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List project's models
     * @param {string} id The ID of the project resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectModels: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List project's revisions
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectRevisions: (id: string, limit?: number, page?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List project's runs
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectRuns: (id: string, limit?: number, page?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List project's workspaces
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectWorkspaces: (id: string, limit?: number, page?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List projects
     * @param {Body9} [body] request payload for filtering and pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjects: (body?: Body9, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove member to project
     * @param {Body12} body User Id
     * @param {string} id The ID of the project object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeProjectMember: (body: Body12, id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a project
     * @param {string} id The ID of the project object to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveProject: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a project
     * @param {Body10} body Project object to be updated
     * @param {string} id The ID of the project object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProject: (body: Body10, id: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ProjectsApi - functional programming interface
 * @export
 */
export declare const ProjectsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add member to project
     * @param {Body11} body User Id
     * @param {string} id The ID of the project object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProjectMember(body: Body11, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>>;
    /**
     *
     * @summary Close a project
     * @param {string} id The ID of the project object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    closeProject(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>>;
    /**
     *
     * @summary Create a project
     * @param {Project} body Project object to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject(body: Project, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>>;
    /**
     *
     * @summary Create project's revision
     * @param {Array&lt;string&gt;} files
     * @param {string} id The ID of the project resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProjectRevision(files: Array<string>, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectRevision>>;
    /**
     *
     * @summary Delete a project
     * @param {string} id The ID of the project object to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>>;
    /**
     *
     * @summary List project's datasets
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectDatasets(id: string, limit?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageLimitList>>;
    /**
     *
     * @summary Search for project's experiments
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectExperiments(id: string, limit?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageLimitList>>;
    /**
     *
     * @summary List project's models
     * @param {string} id The ID of the project resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectModels(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageTokenList>>;
    /**
     *
     * @summary List project's revisions
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectRevisions(id: string, limit?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageLimitList>>;
    /**
     *
     * @summary List project's runs
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectRuns(id: string, limit?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageTokenList>>;
    /**
     *
     * @summary List project's workspaces
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectWorkspaces(id: string, limit?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageTokenList>>;
    /**
     *
     * @summary List projects
     * @param {Body9} [body] request payload for filtering and pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjects(body?: Body9, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageLimitList>>;
    /**
     *
     * @summary Remove member to project
     * @param {Body12} body User Id
     * @param {string} id The ID of the project object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeProjectMember(body: Body12, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>>;
    /**
     *
     * @summary Retrieve a project
     * @param {string} id The ID of the project object to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveProject(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>>;
    /**
     *
     * @summary Update a project
     * @param {Body10} body Project object to be updated
     * @param {string} id The ID of the project object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProject(body: Body10, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>>;
};
/**
 * ProjectsApi - factory interface
 * @export
 */
export declare const ProjectsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add member to project
     * @param {Body11} body User Id
     * @param {string} id The ID of the project object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProjectMember(body: Body11, id: string, options?: any): AxiosPromise<Project>;
    /**
     *
     * @summary Close a project
     * @param {string} id The ID of the project object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    closeProject(id: string, options?: any): AxiosPromise<Status>;
    /**
     *
     * @summary Create a project
     * @param {Project} body Project object to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject(body: Project, options?: any): AxiosPromise<Project>;
    /**
     *
     * @summary Create project's revision
     * @param {Array&lt;string&gt;} files
     * @param {string} id The ID of the project resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProjectRevision(files: Array<string>, id: string, options?: any): AxiosPromise<ProjectRevision>;
    /**
     *
     * @summary Delete a project
     * @param {string} id The ID of the project object to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject(id: string, options?: any): AxiosPromise<Status>;
    /**
     *
     * @summary List project's datasets
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectDatasets(id: string, limit?: number, page?: number, options?: any): AxiosPromise<PageLimitList>;
    /**
     *
     * @summary Search for project's experiments
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectExperiments(id: string, limit?: number, page?: number, options?: any): AxiosPromise<PageLimitList>;
    /**
     *
     * @summary List project's models
     * @param {string} id The ID of the project resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectModels(id: string, options?: any): AxiosPromise<PageTokenList>;
    /**
     *
     * @summary List project's revisions
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectRevisions(id: string, limit?: number, page?: number, options?: any): AxiosPromise<PageLimitList>;
    /**
     *
     * @summary List project's runs
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectRuns(id: string, limit?: number, page?: number, options?: any): AxiosPromise<PageTokenList>;
    /**
     *
     * @summary List project's workspaces
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectWorkspaces(id: string, limit?: number, page?: number, options?: any): AxiosPromise<PageTokenList>;
    /**
     *
     * @summary List projects
     * @param {Body9} [body] request payload for filtering and pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjects(body?: Body9, options?: any): AxiosPromise<PageLimitList>;
    /**
     *
     * @summary Remove member to project
     * @param {Body12} body User Id
     * @param {string} id The ID of the project object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeProjectMember(body: Body12, id: string, options?: any): AxiosPromise<Project>;
    /**
     *
     * @summary Retrieve a project
     * @param {string} id The ID of the project object to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveProject(id: string, options?: any): AxiosPromise<Project>;
    /**
     *
     * @summary Update a project
     * @param {Body10} body Project object to be updated
     * @param {string} id The ID of the project object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProject(body: Body10, id: string, options?: any): AxiosPromise<Project>;
};
/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export declare class ProjectsApi extends BaseAPI {
    /**
     *
     * @summary Add member to project
     * @param {Body11} body User Id
     * @param {string} id The ID of the project object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    addProjectMember(body: Body11, id: string, options?: any): Promise<import("axios").AxiosResponse<Project>>;
    /**
     *
     * @summary Close a project
     * @param {string} id The ID of the project object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    closeProject(id: string, options?: any): Promise<import("axios").AxiosResponse<Status>>;
    /**
     *
     * @summary Create a project
     * @param {Project} body Project object to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    createProject(body: Project, options?: any): Promise<import("axios").AxiosResponse<Project>>;
    /**
     *
     * @summary Create project's revision
     * @param {Array&lt;string&gt;} files
     * @param {string} id The ID of the project resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    createProjectRevision(files: Array<string>, id: string, options?: any): Promise<import("axios").AxiosResponse<ProjectRevision>>;
    /**
     *
     * @summary Delete a project
     * @param {string} id The ID of the project object to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    deleteProject(id: string, options?: any): Promise<import("axios").AxiosResponse<Status>>;
    /**
     *
     * @summary List project's datasets
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    listProjectDatasets(id: string, limit?: number, page?: number, options?: any): Promise<import("axios").AxiosResponse<PageLimitList>>;
    /**
     *
     * @summary Search for project's experiments
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    listProjectExperiments(id: string, limit?: number, page?: number, options?: any): Promise<import("axios").AxiosResponse<PageLimitList>>;
    /**
     *
     * @summary List project's models
     * @param {string} id The ID of the project resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    listProjectModels(id: string, options?: any): Promise<import("axios").AxiosResponse<PageTokenList>>;
    /**
     *
     * @summary List project's revisions
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    listProjectRevisions(id: string, limit?: number, page?: number, options?: any): Promise<import("axios").AxiosResponse<PageLimitList>>;
    /**
     *
     * @summary List project's runs
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    listProjectRuns(id: string, limit?: number, page?: number, options?: any): Promise<import("axios").AxiosResponse<PageTokenList>>;
    /**
     *
     * @summary List project's workspaces
     * @param {string} id The ID of the project resource
     * @param {number} [limit]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    listProjectWorkspaces(id: string, limit?: number, page?: number, options?: any): Promise<import("axios").AxiosResponse<PageTokenList>>;
    /**
     *
     * @summary List projects
     * @param {Body9} [body] request payload for filtering and pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    listProjects(body?: Body9, options?: any): Promise<import("axios").AxiosResponse<PageLimitList>>;
    /**
     *
     * @summary Remove member to project
     * @param {Body12} body User Id
     * @param {string} id The ID of the project object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    removeProjectMember(body: Body12, id: string, options?: any): Promise<import("axios").AxiosResponse<Project>>;
    /**
     *
     * @summary Retrieve a project
     * @param {string} id The ID of the project object to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    retrieveProject(id: string, options?: any): Promise<import("axios").AxiosResponse<Project>>;
    /**
     *
     * @summary Update a project
     * @param {Body10} body Project object to be updated
     * @param {string} id The ID of the project object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    updateProject(body: Body10, id: string, options?: any): Promise<import("axios").AxiosResponse<Project>>;
}
