/**
 * Ilyde Apis
 * OpenApi interface which exposes Ilyde resources to frontends
 *
 * OpenAPI spec version: 0.2.0
 * Contact: alessiofiorentino@hopenly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { Body1 } from '../models';
import { Body2 } from '../models';
import { Body3 } from '../models';
import { Dataset } from '../models';
import { DatasetVersion } from '../models';
import { PageLimitList } from '../models';
import { Status } from '../models';
/**
 * DatasetsApi - axios parameter creator
 * @export
 */
export declare const DatasetsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a dataset
     * @param {Dataset} body Dataset object to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDataset: (body: Dataset, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Create dataset's version
     * @param {Array&lt;string&gt;} files
     * @param {string} id The ID of the dataset resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatasetVersion: (files: Array<string>, id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a dataset
     * @param {string} id The ID of the dataset resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDataset: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Search for dataset's versions
     * @param {string} id The ID of the dataset resource
     * @param {Body1} [body] request payload for filtering and pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatasetVersions: (id: string, body?: Body1, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List datasets
     * @param {Body2} body request payload for filtering and pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatasets: (body: Body2, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a dataset
     * @param {string} id The ID of the dataset resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveDataset: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a dataset
     * @param {Body3} body Dataset object properties to update
     * @param {string} id The ID of the dataset resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDataset: (body: Body3, id: string, options?: any) => Promise<RequestArgs>;
};
/**
 * DatasetsApi - functional programming interface
 * @export
 */
export declare const DatasetsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a dataset
     * @param {Dataset} body Dataset object to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDataset(body: Dataset, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dataset>>;
    /**
     *
     * @summary Create dataset's version
     * @param {Array&lt;string&gt;} files
     * @param {string} id The ID of the dataset resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatasetVersion(files: Array<string>, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetVersion>>;
    /**
     *
     * @summary Delete a dataset
     * @param {string} id The ID of the dataset resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDataset(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>>;
    /**
     *
     * @summary Search for dataset's versions
     * @param {string} id The ID of the dataset resource
     * @param {Body1} [body] request payload for filtering and pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatasetVersions(id: string, body?: Body1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageLimitList>>;
    /**
     *
     * @summary List datasets
     * @param {Body2} body request payload for filtering and pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatasets(body: Body2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageLimitList>>;
    /**
     *
     * @summary Retrieve a dataset
     * @param {string} id The ID of the dataset resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveDataset(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dataset>>;
    /**
     *
     * @summary Update a dataset
     * @param {Body3} body Dataset object properties to update
     * @param {string} id The ID of the dataset resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDataset(body: Body3, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dataset>>;
};
/**
 * DatasetsApi - factory interface
 * @export
 */
export declare const DatasetsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a dataset
     * @param {Dataset} body Dataset object to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDataset(body: Dataset, options?: any): AxiosPromise<Dataset>;
    /**
     *
     * @summary Create dataset's version
     * @param {Array&lt;string&gt;} files
     * @param {string} id The ID of the dataset resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatasetVersion(files: Array<string>, id: string, options?: any): AxiosPromise<DatasetVersion>;
    /**
     *
     * @summary Delete a dataset
     * @param {string} id The ID of the dataset resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDataset(id: string, options?: any): AxiosPromise<Status>;
    /**
     *
     * @summary Search for dataset's versions
     * @param {string} id The ID of the dataset resource
     * @param {Body1} [body] request payload for filtering and pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatasetVersions(id: string, body?: Body1, options?: any): AxiosPromise<PageLimitList>;
    /**
     *
     * @summary List datasets
     * @param {Body2} body request payload for filtering and pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatasets(body: Body2, options?: any): AxiosPromise<PageLimitList>;
    /**
     *
     * @summary Retrieve a dataset
     * @param {string} id The ID of the dataset resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveDataset(id: string, options?: any): AxiosPromise<Dataset>;
    /**
     *
     * @summary Update a dataset
     * @param {Body3} body Dataset object properties to update
     * @param {string} id The ID of the dataset resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDataset(body: Body3, id: string, options?: any): AxiosPromise<Dataset>;
};
/**
 * DatasetsApi - object-oriented interface
 * @export
 * @class DatasetsApi
 * @extends {BaseAPI}
 */
export declare class DatasetsApi extends BaseAPI {
    /**
     *
     * @summary Create a dataset
     * @param {Dataset} body Dataset object to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createDataset(body: Dataset, options?: any): Promise<import("axios").AxiosResponse<Dataset>>;
    /**
     *
     * @summary Create dataset's version
     * @param {Array&lt;string&gt;} files
     * @param {string} id The ID of the dataset resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createDatasetVersion(files: Array<string>, id: string, options?: any): Promise<import("axios").AxiosResponse<DatasetVersion>>;
    /**
     *
     * @summary Delete a dataset
     * @param {string} id The ID of the dataset resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    deleteDataset(id: string, options?: any): Promise<import("axios").AxiosResponse<Status>>;
    /**
     *
     * @summary Search for dataset's versions
     * @param {string} id The ID of the dataset resource
     * @param {Body1} [body] request payload for filtering and pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetVersions(id: string, body?: Body1, options?: any): Promise<import("axios").AxiosResponse<PageLimitList>>;
    /**
     *
     * @summary List datasets
     * @param {Body2} body request payload for filtering and pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasets(body: Body2, options?: any): Promise<import("axios").AxiosResponse<PageLimitList>>;
    /**
     *
     * @summary Retrieve a dataset
     * @param {string} id The ID of the dataset resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    retrieveDataset(id: string, options?: any): Promise<import("axios").AxiosResponse<Dataset>>;
    /**
     *
     * @summary Update a dataset
     * @param {Body3} body Dataset object properties to update
     * @param {string} id The ID of the dataset resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    updateDataset(body: Body3, id: string, options?: any): Promise<import("axios").AxiosResponse<Dataset>>;
}
