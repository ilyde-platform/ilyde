/**
 * Ilyde Apis
 * OpenApi interface which exposes Ilyde resources to frontends
 *
 * OpenAPI spec version: 0.2.0
 * Contact: alessiofiorentino@hopenly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { PageLimitList } from '../models';
import { Status } from '../models';
import { User } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a user
     * @param {User} body User object to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: (body: User, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a user
     * @param {string} id The ID of the user object to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary list users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a user
     * @param {string} id The ID of the user object to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveUser: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a user
     * @param {User} body User object to be updated
     * @param {string} id The ID of the user object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: (body: User, id: string, options?: any) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a user
     * @param {User} body User object to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(body: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary Delete a user
     * @param {string} id The ID of the user object to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>>;
    /**
     *
     * @summary list users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageLimitList>>;
    /**
     *
     * @summary Retrieve a user
     * @param {string} id The ID of the user object to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveUser(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary Update a user
     * @param {User} body User object to be updated
     * @param {string} id The ID of the user object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(body: User, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a user
     * @param {User} body User object to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(body: User, options?: any): AxiosPromise<User>;
    /**
     *
     * @summary Delete a user
     * @param {string} id The ID of the user object to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(id: string, options?: any): AxiosPromise<Status>;
    /**
     *
     * @summary list users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(options?: any): AxiosPromise<PageLimitList>;
    /**
     *
     * @summary Retrieve a user
     * @param {string} id The ID of the user object to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveUser(id: string, options?: any): AxiosPromise<User>;
    /**
     *
     * @summary Update a user
     * @param {User} body User object to be updated
     * @param {string} id The ID of the user object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(body: User, id: string, options?: any): AxiosPromise<User>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     *
     * @summary Create a user
     * @param {User} body User object to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createUser(body: User, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     *
     * @summary Delete a user
     * @param {string} id The ID of the user object to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUser(id: string, options?: any): Promise<import("axios").AxiosResponse<Status>>;
    /**
     *
     * @summary list users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUsers(options?: any): Promise<import("axios").AxiosResponse<PageLimitList>>;
    /**
     *
     * @summary Retrieve a user
     * @param {string} id The ID of the user object to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    retrieveUser(id: string, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     *
     * @summary Update a user
     * @param {User} body User object to be updated
     * @param {string} id The ID of the user object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUser(body: User, id: string, options?: any): Promise<import("axios").AxiosResponse<User>>;
}
