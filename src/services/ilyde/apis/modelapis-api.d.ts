/**
 * Ilyde Apis
 * OpenApi interface which exposes Ilyde resources to frontends
 *
 * OpenAPI spec version: 0.2.0
 * Contact: alessiofiorentino@hopenly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { Body6 } from '../models';
import { Generic } from '../models';
import { InlineResponse200 } from '../models';
import { ModelApi } from '../models';
import { PageLimitList } from '../models';
import { Status } from '../models';
/**
 * ModelapisApi - axios parameter creator
 * @export
 */
export declare const ModelapisApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a modelapi
     * @param {ModelApi} body modelapi payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createModelapi: (body: ModelApi, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a modelapi
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteModelapi: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Fetch logs of a given modelapi.
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchModelapiLogs: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List modelapis
     * @param {Body6} [body] request payload for filtering and pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listModelapis: (body?: Body6, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a modelapi
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveModelapi: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get signature of modelapi
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signatureModelapi: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Start a job
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startModelapi: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get state of modelapi.
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusModelapi: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Stop a running modelapi.
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopModelapi: (id: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ModelapisApi - functional programming interface
 * @export
 */
export declare const ModelapisApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a modelapi
     * @param {ModelApi} body modelapi payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createModelapi(body: ModelApi, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelApi>>;
    /**
     *
     * @summary Delete a modelapi
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteModelapi(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>>;
    /**
     *
     * @summary Fetch logs of a given modelapi.
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchModelapiLogs(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Generic>>;
    /**
     *
     * @summary List modelapis
     * @param {Body6} [body] request payload for filtering and pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listModelapis(body?: Body6, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageLimitList>>;
    /**
     *
     * @summary Retrieve a modelapi
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveModelapi(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelApi>>;
    /**
     *
     * @summary Get signature of modelapi
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signatureModelapi(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Generic>>;
    /**
     *
     * @summary Start a job
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startModelapi(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>>;
    /**
     *
     * @summary Get state of modelapi.
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusModelapi(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>>;
    /**
     *
     * @summary Stop a running modelapi.
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopModelapi(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>>;
};
/**
 * ModelapisApi - factory interface
 * @export
 */
export declare const ModelapisApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a modelapi
     * @param {ModelApi} body modelapi payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createModelapi(body: ModelApi, options?: any): AxiosPromise<ModelApi>;
    /**
     *
     * @summary Delete a modelapi
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteModelapi(id: string, options?: any): AxiosPromise<Status>;
    /**
     *
     * @summary Fetch logs of a given modelapi.
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchModelapiLogs(id: string, options?: any): AxiosPromise<Generic>;
    /**
     *
     * @summary List modelapis
     * @param {Body6} [body] request payload for filtering and pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listModelapis(body?: Body6, options?: any): AxiosPromise<PageLimitList>;
    /**
     *
     * @summary Retrieve a modelapi
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveModelapi(id: string, options?: any): AxiosPromise<ModelApi>;
    /**
     *
     * @summary Get signature of modelapi
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signatureModelapi(id: string, options?: any): AxiosPromise<Generic>;
    /**
     *
     * @summary Start a job
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startModelapi(id: string, options?: any): AxiosPromise<Status>;
    /**
     *
     * @summary Get state of modelapi.
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusModelapi(id: string, options?: any): AxiosPromise<InlineResponse200>;
    /**
     *
     * @summary Stop a running modelapi.
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopModelapi(id: string, options?: any): AxiosPromise<Status>;
};
/**
 * ModelapisApi - object-oriented interface
 * @export
 * @class ModelapisApi
 * @extends {BaseAPI}
 */
export declare class ModelapisApi extends BaseAPI {
    /**
     *
     * @summary Create a modelapi
     * @param {ModelApi} body modelapi payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelapisApi
     */
    createModelapi(body: ModelApi, options?: any): Promise<import("axios").AxiosResponse<ModelApi>>;
    /**
     *
     * @summary Delete a modelapi
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelapisApi
     */
    deleteModelapi(id: string, options?: any): Promise<import("axios").AxiosResponse<Status>>;
    /**
     *
     * @summary Fetch logs of a given modelapi.
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelapisApi
     */
    fetchModelapiLogs(id: string, options?: any): Promise<import("axios").AxiosResponse<Generic>>;
    /**
     *
     * @summary List modelapis
     * @param {Body6} [body] request payload for filtering and pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelapisApi
     */
    listModelapis(body?: Body6, options?: any): Promise<import("axios").AxiosResponse<PageLimitList>>;
    /**
     *
     * @summary Retrieve a modelapi
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelapisApi
     */
    retrieveModelapi(id: string, options?: any): Promise<import("axios").AxiosResponse<ModelApi>>;
    /**
     *
     * @summary Get signature of modelapi
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelapisApi
     */
    signatureModelapi(id: string, options?: any): Promise<import("axios").AxiosResponse<Generic>>;
    /**
     *
     * @summary Start a job
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelapisApi
     */
    startModelapi(id: string, options?: any): Promise<import("axios").AxiosResponse<Status>>;
    /**
     *
     * @summary Get state of modelapi.
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelapisApi
     */
    statusModelapi(id: string, options?: any): Promise<import("axios").AxiosResponse<InlineResponse200>>;
    /**
     *
     * @summary Stop a running modelapi.
     * @param {string} id The ID of the modelapi resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelapisApi
     */
    stopModelapi(id: string, options?: any): Promise<import("axios").AxiosResponse<Status>>;
}
