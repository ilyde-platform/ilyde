/**
 * Ilyde Apis
 * OpenApi interface which exposes Ilyde resources to frontends
 *
 * OpenAPI spec version: 0.2.0
 * Contact: alessiofiorentino@hopenly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { Generic } from '../models';
import { InlineResponse200 } from '../models';
import { Status } from '../models';
import { Workspace } from '../models';
/**
 * WorkspacesApi - axios parameter creator
 * @export
 */
export declare const WorkspacesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a workspace
     * @param {Workspace} body Workspace payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspace: (body: Workspace, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a workspace
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspace: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Fetch logs of a given workspace.
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchWorkspaceLogs: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a workspace
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveWorkspace: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Start a job
     * @param {string} id The ID of the workspace resource
     * @param {boolean} startWithLatestVersion Start job with the latest revision of the project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startWorkspace: (id: string, startWithLatestVersion: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get state of a workspace.
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusWorkspace: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Stop a running workspace.
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopWorkspace: (id: string, options?: any) => Promise<RequestArgs>;
};
/**
 * WorkspacesApi - functional programming interface
 * @export
 */
export declare const WorkspacesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a workspace
     * @param {Workspace} body Workspace payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspace(body: Workspace, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workspace>>;
    /**
     *
     * @summary Delete a workspace
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspace(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>>;
    /**
     *
     * @summary Fetch logs of a given workspace.
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchWorkspaceLogs(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Generic>>;
    /**
     *
     * @summary Retrieve a workspace
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveWorkspace(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workspace>>;
    /**
     *
     * @summary Start a job
     * @param {string} id The ID of the workspace resource
     * @param {boolean} startWithLatestVersion Start job with the latest revision of the project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startWorkspace(id: string, startWithLatestVersion: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>>;
    /**
     *
     * @summary Get state of a workspace.
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusWorkspace(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>>;
    /**
     *
     * @summary Stop a running workspace.
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopWorkspace(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>>;
};
/**
 * WorkspacesApi - factory interface
 * @export
 */
export declare const WorkspacesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a workspace
     * @param {Workspace} body Workspace payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspace(body: Workspace, options?: any): AxiosPromise<Workspace>;
    /**
     *
     * @summary Delete a workspace
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspace(id: string, options?: any): AxiosPromise<Status>;
    /**
     *
     * @summary Fetch logs of a given workspace.
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchWorkspaceLogs(id: string, options?: any): AxiosPromise<Generic>;
    /**
     *
     * @summary Retrieve a workspace
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveWorkspace(id: string, options?: any): AxiosPromise<Workspace>;
    /**
     *
     * @summary Start a job
     * @param {string} id The ID of the workspace resource
     * @param {boolean} startWithLatestVersion Start job with the latest revision of the project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startWorkspace(id: string, startWithLatestVersion: boolean, options?: any): AxiosPromise<Status>;
    /**
     *
     * @summary Get state of a workspace.
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusWorkspace(id: string, options?: any): AxiosPromise<InlineResponse200>;
    /**
     *
     * @summary Stop a running workspace.
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopWorkspace(id: string, options?: any): AxiosPromise<Status>;
};
/**
 * WorkspacesApi - object-oriented interface
 * @export
 * @class WorkspacesApi
 * @extends {BaseAPI}
 */
export declare class WorkspacesApi extends BaseAPI {
    /**
     *
     * @summary Create a workspace
     * @param {Workspace} body Workspace payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    createWorkspace(body: Workspace, options?: any): Promise<import("axios").AxiosResponse<Workspace>>;
    /**
     *
     * @summary Delete a workspace
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    deleteWorkspace(id: string, options?: any): Promise<import("axios").AxiosResponse<Status>>;
    /**
     *
     * @summary Fetch logs of a given workspace.
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    fetchWorkspaceLogs(id: string, options?: any): Promise<import("axios").AxiosResponse<Generic>>;
    /**
     *
     * @summary Retrieve a workspace
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    retrieveWorkspace(id: string, options?: any): Promise<import("axios").AxiosResponse<Workspace>>;
    /**
     *
     * @summary Start a job
     * @param {string} id The ID of the workspace resource
     * @param {boolean} startWithLatestVersion Start job with the latest revision of the project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    startWorkspace(id: string, startWithLatestVersion: boolean, options?: any): Promise<import("axios").AxiosResponse<Status>>;
    /**
     *
     * @summary Get state of a workspace.
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    statusWorkspace(id: string, options?: any): Promise<import("axios").AxiosResponse<InlineResponse200>>;
    /**
     *
     * @summary Stop a running workspace.
     * @param {string} id The ID of the workspace resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    stopWorkspace(id: string, options?: any): Promise<import("axios").AxiosResponse<Status>>;
}
